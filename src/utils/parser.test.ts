import { parseLine } from "./parser";

describe("parseLine()", () => {
	describe("100 record", () => {
		it("should return the record type", () => {
			expect(parseLine("100,NEM12,200506081149,UNITEDDP,NEMMCO")).toEqual(
				{ code: "100" }
			);
		});
	});

	describe("200 record", () => {
		it("should return the record type, nmi and interval length", () => {
			expect(
				parseLine("200,NEM1201009,E1E2,1,E1,N1,01009,kWh,30,20050610")
			).toEqual({
				code: "200",
				nmi: "NEM1201009",
				intervalLength: 30,
			});

			expect(
				parseLine("200,NEM1201009,E1E2,1,E1,N1,01009,kWh,15,20050610")
			).toEqual({
				code: "200",
				nmi: "NEM1201009",
				intervalLength: 15,
			});

			expect(
				parseLine("200,NEM1201009,E1E2,1,E1,N1,01009,kWh,5,20050610")
			).toEqual({
				code: "200",
				nmi: "NEM1201009",
				intervalLength: 5,
			});
		});
	});

	describe("300 record", () => {
		it("should return the record type, date and consumption values for 30 mins interval (default interval)", () => {
			expect(
				parseLine(
					"300,20050301,0,0,0,0,0,0,0,0,0,0,0,0,0.461,0.810,0.568,1.234,1.353,1.507,1.344,1.773,0.848,1.271,0.895,1.327,1.013,1.793,0.988,0.985,0.876,0.555,0.760,0.938,0.566,0.512,0.970,0.760,0.731,0.615,0.886,0.531,0.774,0.712,0.598,0.670,0.587,0.657,0.345,0.231,A,,,20050310121004,20050310182204"
				)
			).toEqual({
				code: "300",
				date: new Date(2005, 2, 1),
				consumptions: [
					0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.461, 0.81, 0.568,
					1.234, 1.353, 1.507, 1.344, 1.773, 0.848, 1.271, 0.895,
					1.327, 1.013, 1.793, 0.988, 0.985, 0.876, 0.555, 0.76,
					0.938, 0.566, 0.512, 0.97, 0.76, 0.731, 0.615, 0.886, 0.531,
					0.774, 0.712, 0.598, 0.67, 0.587, 0.657, 0.345, 0.231,
				],
			});
		});

		it("should return the record type, date and consumption values for 15 mins interval (non-default interval)", () => {
			expect(
				parseLine(
					"300,20050301,0,0,0,0,0,0,0,0,0,0,0,0,0.461,0.810,0.568,1.234,1.353,1.507,1.344,1.773,0.848,1.271,0.895,1.327,1.013,1.793,0.988,0.985,0.876,0.555,0.760,0.938,0.566,0.512,0.970,0.760,0.731,0.615,0.886,0.531,0.774,0.712,0.598,0.670,0.587,0.657,0.345,0.231,0,0,0,0,0,0,0,0,0,0,0,0,0.461,0.810,0.568,1.234,1.353,1.507,1.344,1.773,0.848,1.271,0.895,1.327,1.013,1.793,0.988,0.985,0.876,0.555,0.760,0.938,0.566,0.512,0.970,0.760,0.731,0.615,0.886,0.531,0.774,0.712,0.598,0.670,0.587,0.657,0.345,0.231,A,,,20050310121004,20050310182204",
					15
				)
			).toEqual({
				code: "300",
				date: new Date(2005, 2, 1),
				consumptions: [
					0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.461, 0.81, 0.568,
					1.234, 1.353, 1.507, 1.344, 1.773, 0.848, 1.271, 0.895,
					1.327, 1.013, 1.793, 0.988, 0.985, 0.876, 0.555, 0.76,
					0.938, 0.566, 0.512, 0.97, 0.76, 0.731, 0.615, 0.886, 0.531,
					0.774, 0.712, 0.598, 0.67, 0.587, 0.657, 0.345, 0.231, 0, 0,
					0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.461, 0.81, 0.568, 1.234,
					1.353, 1.507, 1.344, 1.773, 0.848, 1.271, 0.895, 1.327,
					1.013, 1.793, 0.988, 0.985, 0.876, 0.555, 0.76, 0.938,
					0.566, 0.512, 0.97, 0.76, 0.731, 0.615, 0.886, 0.531, 0.774,
					0.712, 0.598, 0.67, 0.587, 0.657, 0.345, 0.231,
				],
			});
		});
	});

	describe("500 record", () => {
		it("should return the record type", () => {
			expect(parseLine("500,O,S01009,20050310121004,")).toEqual({
				code: "500",
			});
		});
	});

	describe("900 record", () => {
		it("should return the record type", () => {
			expect(parseLine("900")).toEqual({ code: "900" });
		});
	});
});
